generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ProductsCategory {
  Mola // Mola Gang
  Seasonal // Seasonal Specials
  DIY // DIY Kits
  Past // Past Projects
}

model Product {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  category    ProductsCategory
  name        String
  description String

  // to remove: imageUrl, price, stock
  // to add: requests, Options [ { type?, name?, imageUrl, price_SGD, price_TWD, actions, favourited, requested, pre_ordered } ], (not yet) relatedProducts

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // related models
  Options  ProductOptions[]
  CartItem CartItem[]

  @@map("products") // connects model to collection name, so we can change it to Caps + Singular such that it doesn't become misleading
}

enum OptionChoices {
  Wish // Wish list => adds count to favourited + display favourite list for each user
  Enquire // Enquire => adds count to requested
  Order // Pre-order => adds count to pre_ordered
}

model ProductOptions {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // options for product display
  type      String?
  name      String?
  imageUrl  String
  price_SGD Int
  price_TWD Int
  // relatedProducts Product[] @relation("RelatedProducts", references: [id])
  // Estimated Delivery Date

  // actions
  action OptionChoices

  // track product-option-quantity: for ADMIN purposes
  favourited  Int // notify admin >= 10
  requested   Int // enquire to admin
  pre_ordered Int // limit to 5

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // for user model to track product option as favourite
  // Users      User[]   @relation(fields: [userIDs], references: [id])
  // userIDs    String[] @db.ObjectId
  // favourites User[]   @relation("UserFavourites", fields: [userIDs], references: [id], onDelete: Cascade)

  @@map("productoptions")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  userId    String?    @db.ObjectId // attach cart to user so it's not anonymous 
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

enum ProductStatus {
  Ordered
  Preparing
  Ready
  Delivering
  Completed
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  // track status of ordered product from user (ordered) to admin (preparing, ready, delivering) to user (completed)
  status ProductStatus

  cartId String @db.ObjectId
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

// *** REQUIRED by next-auth ---------------------------------------------------------------------------------
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String? // new column => admin || user => route handler auth options => profile() callback's return value is used to create users in the database.

  // for tracking favourite product options for each user account
  // favouriteIDs String[] @db.ObjectId
  // favourites   ProductOptions[] @relation("UserFavourites", fields: [favouriteIDs], references: [id] onDelete: Cascade)

  // related models
  accounts Account[]
  sessions Session[]
  Cart     Cart[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
