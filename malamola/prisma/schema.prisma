// ----------------------------- Setup Prisma & MongoDB --------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// --------------------------------- SCHEMA MODELS -------------------------------------
enum ProductsCategory {
  Mola // Mola Gang
  Seasonal // Seasonal Specials
  DIY // DIY Kits
  Past // Past Projects
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATED MODELS -------------------------------------------------
  // (One)-Many | (Product)-ProductOptions: for linking product to multiple productOptions
  Options ProductOptions[]
  // ----------------------------------------------------------------

  // product details
  category    ProductsCategory
  name        String
  description String
  // tags String[] // for filtering productOptions

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products") // connects model to collection name, so we can change it to Caps + Singular such that it doesn't become misleading
}

enum OptionChoices {
  Wish // Wish list => adds count to wishedFor to count demand of products not currently available
  Enquire // Enquire => adds count to requested
  Order // Pre-order => adds count to pre_ordered
}

model ProductOptions {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATED MODELS -------------------------------------------------
  // One-(Many) | Product-(ProductOptions): for linking multiple productOptions to product
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // delete productOption if product is deleted

  // (Many)-(Many) | self-relations: for linking multiple productOptions to multiple related productsOptions
  relatedId       String[]         @db.ObjectId
  relatedOptions  ProductOptions[] @relation("RelatedProducts", fields: [relatedId], references: [id])
  originalIDs     String[]         @db.ObjectId
  originalOptions ProductOptions[] @relation("RelatedProducts", fields: [relatedId], references: [id])

  // (Many)-Many | (ProductOptions)-User: for multiple productOptions favourited by multiple users
  userIDs    String[] @db.ObjectId
  favourites User[]   @relation(fields: [userIDs], references: [id])

  // (One)-Many | ProductOptions-(CartItem): for linking productItem to multiple cartItems
  CartItem CartItem[]
  // ----------------------------------------------------------------

  // options for product display
  type     String?
  name     String?
  imageUrl String
  priceSGD Int
  priceTWD Int
  // Estimated Delivery Date

  // actions allowed for users to take on productOptions
  action OptionChoices

  // track product-option-quantity: for ADMIN purposes - by default: 0
  wishedFor Int // notify admin >= 10
  requested Int // enquire to admin
  ordered   Int // limit to 5

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("productoptions")
}

model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATED MODELS -------------------------------------------------
  // (One)-Many | (Cart)-CartItem: for linking cart to multiple cartItems
  items CartItem[]

  // One-(Many) | User-(Cart): for linking multiple carts to user
  userId String? @db.ObjectId // attach cart to user so it's not anonymous 
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade) // delete cart if user is deleted
  // ----------------------------------------------------------------

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

enum ProductStatus {
  InCart
  Ordered
  Preparing
  Ready
  Delivering
  Completed
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATED MODELS -------------------------------------------------
  // One-(Many) | ProductOptions-(CartItem): for linking multiple cartItems to productOption
  productOptionID String         @db.ObjectId
  productOption   ProductOptions @relation(fields: [productOptionID], references: [id], onDelete: Cascade) // delete cartItem if productOption is deleted

  // One-(Many) | Cart-(CartItem): for linking multiple cartItems to cart
  cartID String @db.ObjectId
  cart   Cart   @relation(fields: [cartID], references: [id], onDelete: Cascade) // delete cartItem if cart is deleted
  // ----------------------------------------------------------------

  // cart item details
  quantity Int
  // from inCart to track status of ordered product from user (ordered) to admin (preparing, ready, delivering) to user (completed)
  status   ProductStatus

  @@map("cartitems")
}

// *** REQUIRED by next-auth ---------------------------------------------------------------------------------
model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expires DateTime

  @@map("sessions")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // RELATED MODELS -------------------------------------------------
  // Many-(Many) | POptions-(User): for tracking favourite product options of each user account
  favouriteIDs String[]         @db.ObjectId
  favourites   ProductOptions[] @relation(fields: [favouriteIDs], references: [id])

  // (One)-Many | (User)-Accounts; (User)-Sessions; (User)-Cart
  accounts Account[] // To change to one-one
  sessions Session[] // To change to one-one
  Cart     Cart[]
  // ----------------------------------------------------------------

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String? // new column => admin || user => route handler auth options => profile() callback's return value is used to create users in the database.

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
